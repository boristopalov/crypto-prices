{"version":3,"sources":["components/Nav.jsx","data/index.js","components/PriceCard.jsx","utils/index.js","components/App.jsx","reportWebVitals.js","index.js"],"names":["Nav","className","to","activeClassName","axios","require","default","getPriceData","coin","a","url","console","log","get","response","data","PriceCard","state","buy","Kraken","Coinbase","sell","this","fetchData","props","prevProps","then","res","buyPrices","Number","krakenData","result","XXBTZUSD","b","toFixed","coinbaseBuyData","amount","sellPrices","coinbaseSellData","setState","XETHZUSD","catch","e","prices","bestBuyExchange","Object","keys","reduce","bestSellExchange","getBestExchangeToSell","entries","map","exchange","price","Component","App","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d5c7d4f5.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from \"react-router-dom\";\n\nconst Nav = () => {\n    return (\n        <ul className=\"nav\">\n            <li className=\"nav-link\">\n                <NavLink to=\"/btc\" activeClassName=\"nav-active-link\">Bitcoin</NavLink>\n            </li>\n            <li className=\"nav-link\">\n                <NavLink to=\"/eth\" activeClassName=\"nav-active-link\">Ethereum</NavLink>\n            </li>\n        </ul>\n      );\n}\n\nexport default Nav;","const axios = require('axios').default;\n\n// talk to our node backend which should return a response containing price data\nexport const getPriceData = async (coin) => {\n    const url = `/coin/${coin}`;\n    console.log(url);\n    const response = await axios.get(url);\n    const data = response.data;\n    return data;\n}","import React, {Component} from 'react';\nimport { getPriceData } from '../data';\nimport { getBestExchangeToBuy, getBestExchangeToSell } from '../utils';\n\n\nclass PriceCard extends Component {\n    state = {\n        buy:\n        {\n            Kraken: -1,\n            Coinbase: -1,\n        },\n        sell: {\n            Kraken: -1,\n            Coinbase: -1\n        },\n    }\n    componentDidMount() {\n        this.fetchData(this.props.coin);\n    }\n    componentDidUpdate(prevProps) { \n        if (this.props.coin !== prevProps.coin) {\n            this.fetchData(this.props.coin);\n        }\n    }\n\n    fetchData(coin) { \n        getPriceData(coin).then(\n            res => { \n                if (coin === \"BTC\") {\n                    const buyPrices = {\n                        // round Kraken price to 2 decimal places\n                        Kraken: Number(res.krakenData.result.XXBTZUSD.b[0]).toFixed(2),\n                        Coinbase: res.coinbaseBuyData.data.amount,\n                    };\n                    const sellPrices = {\n                        // round Kraken price to 2 decimal palces\n                        Kraken: Number(res.krakenData.result.XXBTZUSD.a[0]).toFixed(2),\n                        Coinbase: res.coinbaseSellData.data.amount,\n                    };\n                    this.setState({\n                        buy: buyPrices,\n                        sell: sellPrices,\n                    })\n                } else if (coin === \"ETH\") {\n                    const buyPrices = {\n                        // round Kraken price to 2 decimal palces\n                        Kraken: Number(res.krakenData.result.XETHZUSD.b[0]).toFixed(2),\n                        Coinbase: res.coinbaseBuyData.data.amount,\n                    };\n                    const sellPrices = {\n                        // round Kraken price to 2 decimal palces\n                        Kraken: Number(res.krakenData.result.XETHZUSD.a[0]).toFixed(2),\n                        Coinbase: res.coinbaseSellData.data.amount,\n                    };\n                    this.setState({\n                        buy: buyPrices,\n                        sell: sellPrices,\n                    })\n                }\n            }\n        ).catch(e => console.log(e))\n    }\n\n    render() {\n        let bestBuyExchange = getBestExchangeToBuy(this.state.buy);\n        let bestSellExchange = getBestExchangeToSell(this.state.sell);\n    return (\n        <div className=\"price-card\">\n            <h2> You should buy {this.props.coin} on {bestBuyExchange} </h2>\n            <h2> You should sell {this.props.coin} on {bestSellExchange} </h2>\n            <br />\n            {Object.entries(this.state.buy)\n            .map(([exchange, price]) => {\n                return <h3 key={exchange}>{exchange} buy price: ${price}</h3>\n            })}\n            {Object.entries(this.state.sell)\n            .map(([exchange, price]) => {\n                return <h3 key={exchange}>{exchange} sell price: ${price}</h3>\n            })}\n        </div>\n     );\n    }\n}\n\nexport default PriceCard;","// best buy price is the lowest price\nexport const getBestExchangeToBuy = (prices) => {\n    return Object.keys(prices).reduce((a, b) => prices[a] < prices[b] ? a : b);\n};\n\n// best sell price is the highest price\nexport const getBestExchangeToSell = (prices) => { \n    return Object.keys(prices).reduce((a, b) => prices[a] > prices[b] ? a : b);\n};\n\n\n\n","import React, { Component } from 'react';\nimport Nav from './Nav';\nimport PriceCard from './PriceCard';\nimport {\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport './style.css';\n\n\nclass App extends Component {\n  render() {\n  return (\n    <div className=\"container\">\n      <Nav />\n      <Switch>\n        <Route path=\"/btc\" render={ () => <PriceCard coin=\"BTC\" />} />\n        <Route path=\"/eth\" render={ () => <PriceCard coin=\"ETH\" />} />\n      </Switch>\n    </div>\n  );  \n  }\n}\n\nexport default App;\n ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}